- name: Install a native GitLab instance
  hosts: gitlab
  become: yes
  become_method: sudo
  vars_files:
    - encrypted_variables.yml

  tasks:
  - name: Install all needed packages
    pacman:
      name: 
        - postgresql
        - python-psycopg2
        - redis
        - nginx-mainline
        - gitlab
        - docker
        - gitlab-runner
        - python-gitlab
      state: latest

  - name: Initialize postgresql database cluster 
    command: initdb -D /var/lib/postgres/data -E UTF8
    become_method: sudo
    become_user: postgres
    args:
      creates: /var/lib/postgres/data/PG_VERSION

  - name: Start and enable postgresql database service
    service:
      name: postgresql
      enabled: yes
      state: started

  - name: Create gitlab database user
    postgresql_user:
      name: admin
      password: "{{ passwd_dbadmin }}"
      role_attr_flags: SUPERUSER

  - name: Create gitlab database
    postgresql_db:
      name: gitlabhq_production
      owner: admin

  - name: Set up /etc/webapps/gitlab/database.yml configuration file
    blockinfile:
      path: /etc/webapps/gitlab/database.yml
      create: yes
      owner: root
      group: gitlab
      mode: 0640
      insertbefore: BOF
      block: |
        production:
          adapter: postgresql
          encoding: unicode
          database: gitlabhq_production
          pool: 10
          username: admin
          password: {{ passwd_dbadmin }}
          socket: /run/postgresql/.s.PGSQL.5432

  - name: Clear database.yml from other data than managed lines
    replace:
      path: /etc/webapps/gitlab/database.yml
      after: '# END ANSIBLE MANAGED BLOCK'
      regexp: '^(.+)$'

  - name: Clear database.yml from extra empty lines
    replace:
      path: /etc/webapps/gitlab/database.yml
      after: '# END ANSIBLE MANAGED BLOCK\n'
      regexp: '^(\s*$)'

  - name: Upload redis configuration file
    copy:
      src: config_files/redis.conf
      dest: /etc/redis.conf

  - name: Start and enable redis cache database service
    service:
      name: redis
      enabled: yes
      state: started

  - name: Put gitlab user to redis group
    user: 
      name: gitlab
      groups: redis

  - name: Set /etc/webapps/gitlab/resque.yml configuration file
    copy:
      src: config_files/resque.yml
      dest: /etc/webapps/gitlab/resque.yml

  - name: Create file used for auth token generation - /etc/webapps/gitlab/secret
    lineinfile:
      path: /etc/webapps/gitlab/secret
      line: "{{ enckey_gitlab_secret }}"
      create: yes
      owner: root
      group: gitlab
      mode: 0640

  - name: Create file used for auth token generation - /etc/webapps/gitlab-shell/secret
    lineinfile:
      path: /etc/webapps/gitlab-shell/secret
      line: "{{ enckey_gitlab_shell_secret }}"
      create: yes
      owner: root
      group: gitlab
      mode: 0640

  - name: Fill in secret strings to /etc/webapps/gitlab/secrets.yml
    blockinfile:
      path: /etc/webapps/gitlab/secrets.yml
      create: yes
      owner: root
      group: gitlab
      mode: 0640
      block: |
        production:
          secret_key_base: {{ enckey_secret_key_base }}
          db_key_base: {{ enckey_db_key_base }}
          otp_key_base: {{ enckey_otp_key_base }}
          openid_connect_signing_key: {{ enckey_openid_connect_signing_key }}

  - name: Upload the main configuration file - /etc/webapps/gitlab/gitlab.yml
    copy:
      src: config_files/gitlab.yml
      dest: /etc/webapps/gitlab/gitlab.yml

  - name: Start the gitlab-gitaly service
    service:
      name: gitlab-gitaly
      enabled: yes
      state: started
 
  - name: Set 0755 permissions for /usr/share/webapps/gitlab/tmp
    file:
      path: /usr/share/webapps/gitlab/tmp
      state: directory
      owner: gitlab
      group: gitlab
      mode: 0755  

  - name: Initialize the GitLab database
    become_method: sudo
    become_user: gitlab
    shell: env $(cat environment | xargs) bundle exec rake gitlab:setup force=yes GITLAB_ROOT_PASSWORD="{{ passwd_gitlab_admin }}"
    args:
      chdir: /usr/share/webapps/gitlab
      creates: /etc/webapps/gitlab/db_init_true

  - name: Create the db initialization file
    file:
      path: /etc/webapps/gitlab/db_init_true
      state: touch

  - name: Make directory for nginx certificates
    file:
      path: /etc/nginx/ssl
      state: directory

  - name: Upload nginx webserver configuration files and certificate
    copy: src={{ item.src }} dest={{ item.dest }}
    with_items:
      - { src: 'config_files/nginx.conf', dest: '/etc/nginx/nginx.conf' }
      - { src: 'config_files/nginx_gitlab.conf', dest: '/etc/nginx/nginx_gitlab.conf' }
      - { src: '../secrets/gitlab.key', dest: '/etc/nginx/ssl/gitlab.key' }
      - { src: '../secrets/gitlab.crt', dest: '/etc/nginx/ssl/gitlab.crt' }

  - name: Set permissions for the certificate key
    file:
      path: /etc/nginx/ssl/gitlab.key
      owner: root
      group: root
      mode: 0400

  - name: Start nginx proxy webserver
    service:
      name: nginx
      enabled: yes
      state: started

  - name: Start GitLab
    service:
      name: gitlab.target
      enabled: yes
      state: started

  - name: Create pacman hooks directory
    file:
      path: /etc/pacman.d/hooks
      state: directory

  - name: Set up GitLab upgrade pacman hook
    copy: src={{ item.src }} dest={{ item.dest }}
    with_items:
      - { src: 'config_files/gitlab.hook', dest: '/etc/pacman.d/hooks/gitlab.hook' }
      - { src: 'config_files/gitlab-upgrade.sh', dest: '/etc/pacman.d/hooks/gitlab-upgrade.sh' }

  - name: Make GitLab upgrade hook script executable
    file:
      path: /etc/pacman.d/hooks/gitlab-upgrade.sh
      mode: 0700

  - name: Start gitlab-runner
    service:
      name: gitlab-runner
      enabled: yes
      state: started

  - name: Remove default gitlab-runner configuration file
    file:
      path: /etc/gitlab-runner/config.toml
      state: absent

  - name: Put gitlab-runner user to docker and http groups
    user:
      name: gitlab-runner
      groups: docker, http
      append: yes

  - name: Start and enable docker service daemon
    service:
      name: docker
      enabled: yes
      state: started

  - name: Create a public directory for testing repository
    file:
      path: /srv/http/selinux-testing
      state: directory
      group: http
      mode: 0774
